{"ast":null,"code":"import { ERROR_MESSAGE } from './errors';\n/**\n * Copyright (c) 2022\n *\n * Utilities related to reading configuration objects\n *\n * @summary Config-related utils\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nconst urlRegex = new RegExp(['(^(https?:)//)?', '(([^:/?#]*)(?::([0-9]+))?)', '(/{0,1}[^?#]*)', '(\\\\?[^#]*|)', '(#.*|)$' // hash\n].join(''));\n/**\n * Parse and construct the ThoughtSpot hostname or IP address\n * from the embed configuration object.\n * @param config\n */\n\nexport const getThoughtSpotHost = config => {\n  const urlParts = config.thoughtSpotHost.match(urlRegex);\n\n  if (!urlParts) {\n    throw new Error(ERROR_MESSAGE.INVALID_THOUGHTSPOT_HOST);\n  }\n\n  const protocol = urlParts[2] || window.location.protocol;\n  const host = urlParts[3];\n  let path = urlParts[6]; // Lose the trailing / if any\n\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1);\n  } // const urlParams = urlParts[7];\n  // const hash = urlParts[8];\n\n\n  return `${protocol}//${host}${path}`;\n};\nexport const getV2BasePath = config => {\n  if (config.basepath) {\n    return config.basepath;\n  }\n\n  const tsHost = getThoughtSpotHost(config); // This is to handle when e2e's. Search is run on pods for comp-blink-test-pipeline\n  // with baseUrl=https://localhost:8443.\n  // This is to handle when the developer is developing in their local environment.\n\n  if (tsHost.includes('://localhost') && !tsHost.includes(':8443')) {\n    return '';\n  }\n\n  return 'v2';\n};\n/**\n * It is a good idea to keep URLs under 2000 chars.\n * If this is ever breached, since we pass view configuration through\n * URL params, we would like to log a warning.\n * Reference: https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n */\n\nexport const URL_MAX_LENGTH = 2000;\n/**\n * The default CSS dimensions of the embedded app\n */\n\nexport const DEFAULT_EMBED_WIDTH = '100%';\nexport const DEFAULT_EMBED_HEIGHT = '100%';","map":{"version":3,"sources":["C:\\Users\\NathanSchroeder\\Documents\\Dev\\IntegrationEnvironment\\frontend\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\config.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAA8B,UAA9B;AAGA;;;;;;;AAOG;;AAEH,MAAM,QAAQ,GAAG,IAAI,MAAJ,CACb,CACI,iBADJ,EAEI,4BAFJ,EAGI,gBAHJ,EAII,aAJJ,EAKI,SALJ,CAKe;AALf,EAME,IANF,CAMO,EANP,CADa,CAAjB;AAUA;;;;AAIG;;AACH,OAAO,MAAM,kBAAkB,GAAI,MAAD,IAAgC;AAC9D,QAAM,QAAQ,GAAG,MAAM,CAAC,eAAP,CAAuB,KAAvB,CAA6B,QAA7B,CAAjB;;AACA,MAAI,CAAC,QAAL,EAAe;AACX,UAAM,IAAI,KAAJ,CAAU,aAAa,CAAC,wBAAxB,CAAN;AACH;;AAED,QAAM,QAAQ,GAAG,QAAQ,CAAC,CAAD,CAAR,IAAe,MAAM,CAAC,QAAP,CAAgB,QAAhD;AACA,QAAM,IAAI,GAAG,QAAQ,CAAC,CAAD,CAArB;AACA,MAAI,IAAI,GAAG,QAAQ,CAAC,CAAD,CAAnB,CAR8D,CAS9D;;AACA,MAAI,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,MAAL,GAAc,CAA1B,MAAiC,GAArC,EAA0C;AACtC,IAAA,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,IAAI,CAAC,MAAL,GAAc,CAAhC,CAAP;AACH,GAZ6D,CAa9D;AACA;;;AAEA,SAAO,GAAG,QAAQ,KAAK,IAAI,GAAG,IAAI,EAAlC;AACH,CAjBM;AAmBP,OAAO,MAAM,aAAa,GAAI,MAAD,IAAgC;AACzD,MAAI,MAAM,CAAC,QAAX,EAAqB;AACjB,WAAO,MAAM,CAAC,QAAd;AACH;;AAED,QAAM,MAAM,GAAG,kBAAkB,CAAC,MAAD,CAAjC,CALyD,CAOzD;AACA;AACA;;AACA,MAAI,MAAM,CAAC,QAAP,CAAgB,cAAhB,KAAmC,CAAC,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAxC,EAAkE;AAC9D,WAAO,EAAP;AACH;;AAED,SAAO,IAAP;AACH,CAfM;AAiBP;;;;;AAKG;;AACH,OAAO,MAAM,cAAc,GAAG,IAAvB;AAEP;;AAEG;;AACH,OAAO,MAAM,mBAAmB,GAAG,MAA5B;AACP,OAAO,MAAM,oBAAoB,GAAG,MAA7B","sourcesContent":["import { ERROR_MESSAGE } from './errors';\nimport { EmbedConfig } from './types';\n\n/**\n * Copyright (c) 2022\n *\n * Utilities related to reading configuration objects\n *\n * @summary Config-related utils\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nconst urlRegex = new RegExp(\n    [\n        '(^(https?:)//)?', // protocol\n        '(([^:/?#]*)(?::([0-9]+))?)', // host (hostname and port)\n        '(/{0,1}[^?#]*)', // pathname\n        '(\\\\?[^#]*|)', // search\n        '(#.*|)$', // hash\n    ].join(''),\n);\n\n/**\n * Parse and construct the ThoughtSpot hostname or IP address\n * from the embed configuration object.\n * @param config\n */\nexport const getThoughtSpotHost = (config: EmbedConfig): string => {\n    const urlParts = config.thoughtSpotHost.match(urlRegex);\n    if (!urlParts) {\n        throw new Error(ERROR_MESSAGE.INVALID_THOUGHTSPOT_HOST);\n    }\n\n    const protocol = urlParts[2] || window.location.protocol;\n    const host = urlParts[3];\n    let path = urlParts[6];\n    // Lose the trailing / if any\n    if (path.charAt(path.length - 1) === '/') {\n        path = path.substring(0, path.length - 1);\n    }\n    // const urlParams = urlParts[7];\n    // const hash = urlParts[8];\n\n    return `${protocol}//${host}${path}`;\n};\n\nexport const getV2BasePath = (config: EmbedConfig): string => {\n    if (config.basepath) {\n        return config.basepath;\n    }\n\n    const tsHost = getThoughtSpotHost(config);\n\n    // This is to handle when e2e's. Search is run on pods for comp-blink-test-pipeline\n    // with baseUrl=https://localhost:8443.\n    // This is to handle when the developer is developing in their local environment.\n    if (tsHost.includes('://localhost') && !tsHost.includes(':8443')) {\n        return '';\n    }\n\n    return 'v2';\n};\n\n/**\n * It is a good idea to keep URLs under 2000 chars.\n * If this is ever breached, since we pass view configuration through\n * URL params, we would like to log a warning.\n * Reference: https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n */\nexport const URL_MAX_LENGTH = 2000;\n\n/**\n * The default CSS dimensions of the embedded app\n */\nexport const DEFAULT_EMBED_WIDTH = '100%';\nexport const DEFAULT_EMBED_HEIGHT = '100%';\n"]},"metadata":{},"sourceType":"module"}