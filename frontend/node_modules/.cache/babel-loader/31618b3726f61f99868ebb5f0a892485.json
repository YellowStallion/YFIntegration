{"ast":null,"code":"/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { ERROR_MESSAGE } from '../errors';\nimport { EmbedEvent, Param } from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed } from './ts-embed';\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\n\nexport class LiveboardEmbed extends V1Embed {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(domSelector, viewConfig) {\n    super(domSelector, viewConfig);\n    this.defaultHeight = 500;\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n\n    this.updateIFrameHeight = data => {\n      this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n\n    this.embedIframeCenter = (data, responder) => {\n      const obj = this.getIframeCenter();\n      responder({\n        type: EmbedEvent.EmbedIframeCenter,\n        data: obj\n      });\n    };\n\n    this.setIframeHeightForNonEmbedLiveboard = data => {\n      if (!data.data.currentPath.startsWith('/embed/viz/')) {\n        this.setIFrameHeight(this.defaultHeight);\n      }\n    };\n  }\n  /**\n   * Construct a map of params to be passed on to the\n   * embedded Liveboard or visualization.\n   */\n\n\n  getEmbedParams() {\n    const params = this.getBaseQueryParams();\n    const {\n      enableVizTransformations,\n      fullHeight,\n      defaultHeight\n    } = this.viewConfig;\n    const preventLiveboardFilterRemoval = this.viewConfig.preventLiveboardFilterRemoval || this.viewConfig.preventPinboardFilterRemoval;\n\n    if (fullHeight === true) {\n      params[Param.fullHeight] = true;\n    }\n\n    if (defaultHeight) {\n      this.defaultHeight = defaultHeight;\n    }\n\n    if (enableVizTransformations !== undefined) {\n      params[Param.EnableVizTransformations] = enableVizTransformations.toString();\n    }\n\n    if (preventLiveboardFilterRemoval) {\n      params[Param.preventLiveboardFilterRemoval] = true;\n    }\n\n    params[Param.livedBoardEmbed] = true;\n    const queryParams = getQueryParamString(params, true);\n    return queryParams;\n  }\n  /**\n   * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n   * to be loaded within the iframe.\n   * @param liveboardId The GUID of the Liveboard.\n   * @param vizId The optional GUID of a visualization within the Liveboard.\n   * @param runtimeFilters A list of runtime filters to be applied to\n   * the Liveboard or visualization on load.\n   */\n\n\n  getIFrameSrc(liveboardId, vizId, runtimeFilters) {\n    const filterQuery = getFilterQuery(runtimeFilters || []);\n    const queryParams = this.getEmbedParams();\n    const queryString = [filterQuery, queryParams].filter(Boolean).join('&');\n    let url = `${this.getV1EmbedBasePath(queryString, true, false, false)}/viz/${liveboardId}`;\n\n    if (vizId) {\n      url = `${url}/${vizId}`;\n    }\n\n    return url;\n  }\n  /**\n   * Render an embedded ThoughtSpot Liveboard or visualization\n   * @param renderOptions An object specifying the Liveboard ID,\n   * visualization ID and the runtime filters.\n   */\n\n\n  render() {\n    var _a;\n\n    const {\n      vizId,\n      runtimeFilters\n    } = this.viewConfig;\n    const liveboardId = (_a = this.viewConfig.liveboardId) !== null && _a !== void 0 ? _a : this.viewConfig.pinboardId;\n\n    if (!liveboardId) {\n      this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n    }\n\n    if (this.viewConfig.fullHeight === true) {\n      this.on(EmbedEvent.RouteChange, this.setIframeHeightForNonEmbedLiveboard);\n      this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n      this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n    }\n\n    super.render();\n    const src = this.getIFrameSrc(liveboardId, vizId, runtimeFilters);\n    this.renderV1Embed(src);\n    return this;\n  }\n\n}\n/**\n * @hidden\n */\n\nexport class PinboardEmbed extends LiveboardEmbed {}","map":{"version":3,"sources":["C:\\Users\\NathanSchroeder\\Documents\\Dev\\IntegrationEnvironment\\frontend\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\liveboard.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2022\n *\n * Embed a ThoughtSpot Liveboard or visualization\n * https://developers.thoughtspot.com/docs/?pageid=embed-pinboard\n * https://developers.thoughtspot.com/docs/?pageid=embed-a-viz\n *\n * @summary Liveboard & visualization embed\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\n\nimport { ERROR_MESSAGE } from '../errors';\nimport {\n    EmbedEvent,\n    MessagePayload,\n    Param,\n    RuntimeFilter,\n    DOMSelector,\n    HostEvent,\n} from '../types';\nimport { getFilterQuery, getQueryParamString } from '../utils';\nimport { V1Embed, ViewConfig } from './ts-embed';\n\n/**\n * The configuration for the embedded Liveboard or visualization page view.\n * @Category Liveboards and Charts\n */\nexport interface LiveboardViewConfig extends ViewConfig {\n    /**\n     * If set to true, the embedded object container dynamically resizes\n     * according to the height of the Liveboard.\n     */\n    fullHeight?: boolean;\n    /**\n     * This is the minimum height(in pixels) for a full height Liveboard.\n     * Setting this height helps resolves issues with empty Liveboards and\n     * other screens navigable from a Liveboard.\n     * *_since 1.5.0_\n     * @default 500\n     */\n    defaultHeight?: number;\n    /**\n     * If set to true, the context menu in visualizations will be enabled.\n     */\n    enableVizTransformations?: boolean;\n    /**\n     * The Liveboard to display in the embedded view.\n     * Use either of liveboardId or pinboardId to reference the Liveboard to embed.\n     */\n    liveboardId?: string;\n    /**\n     * To support backward compatibilty\n     * @hidden\n     */\n    pinboardId?: string;\n    /**\n     * The visualization within the Liveboard to display.\n     */\n    vizId?: string;\n    /**\n     * If set to true, all filter chips from a\n     * Liveboard page will be read-only (no X buttons)\n     */\n    preventLiveboardFilterRemoval?: boolean;\n    /**\n     * To support backward compatibilty\n     * @hidden\n     */\n    preventPinboardFilterRemoval?: boolean;\n}\n\n/**\n * Embed a ThoughtSpot Liveboard or visualization\n * @Category Liveboards and Charts\n */\nexport class LiveboardEmbed extends V1Embed {\n    protected viewConfig: LiveboardViewConfig;\n\n    private defaultHeight = 500;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(domSelector: DOMSelector, viewConfig: LiveboardViewConfig) {\n        super(domSelector, viewConfig);\n    }\n\n    /**\n     * Construct a map of params to be passed on to the\n     * embedded Liveboard or visualization.\n     */\n    private getEmbedParams() {\n        const params = this.getBaseQueryParams();\n        const {\n            enableVizTransformations,\n            fullHeight,\n            defaultHeight,\n        } = this.viewConfig;\n\n        const preventLiveboardFilterRemoval =\n            this.viewConfig.preventLiveboardFilterRemoval ||\n            this.viewConfig.preventPinboardFilterRemoval;\n\n        if (fullHeight === true) {\n            params[Param.fullHeight] = true;\n        }\n        if (defaultHeight) {\n            this.defaultHeight = defaultHeight;\n        }\n        if (enableVizTransformations !== undefined) {\n            params[\n                Param.EnableVizTransformations\n            ] = enableVizTransformations.toString();\n        }\n        if (preventLiveboardFilterRemoval) {\n            params[Param.preventLiveboardFilterRemoval] = true;\n        }\n        params[Param.livedBoardEmbed] = true;\n        const queryParams = getQueryParamString(params, true);\n\n        return queryParams;\n    }\n\n    /**\n     * Construct the URL of the embedded ThoughtSpot Liveboard or visualization\n     * to be loaded within the iframe.\n     * @param liveboardId The GUID of the Liveboard.\n     * @param vizId The optional GUID of a visualization within the Liveboard.\n     * @param runtimeFilters A list of runtime filters to be applied to\n     * the Liveboard or visualization on load.\n     */\n    private getIFrameSrc(\n        liveboardId: string,\n        vizId?: string,\n        runtimeFilters?: RuntimeFilter[],\n    ) {\n        const filterQuery = getFilterQuery(runtimeFilters || []);\n        const queryParams = this.getEmbedParams();\n        const queryString = [filterQuery, queryParams]\n            .filter(Boolean)\n            .join('&');\n        let url = `${this.getV1EmbedBasePath(\n            queryString,\n            true,\n            false,\n            false,\n        )}/viz/${liveboardId}`;\n        if (vizId) {\n            url = `${url}/${vizId}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Set the iframe height as per the computed height received\n     * from the ThoughtSpot app.\n     * @param data The event payload\n     */\n    private updateIFrameHeight = (data: MessagePayload) => {\n        this.setIFrameHeight(Math.max(data.data, this.defaultHeight));\n    };\n\n    private embedIframeCenter = (data: MessagePayload, responder: any) => {\n        const obj = this.getIframeCenter();\n        responder({ type: EmbedEvent.EmbedIframeCenter, data: obj });\n    };\n\n    private setIframeHeightForNonEmbedLiveboard = (data: MessagePayload) => {\n        if (!data.data.currentPath.startsWith('/embed/viz/')) {\n            this.setIFrameHeight(this.defaultHeight);\n        }\n    };\n\n    /**\n     * Render an embedded ThoughtSpot Liveboard or visualization\n     * @param renderOptions An object specifying the Liveboard ID,\n     * visualization ID and the runtime filters.\n     */\n    public render(): LiveboardEmbed {\n        const { vizId, runtimeFilters } = this.viewConfig;\n        const liveboardId =\n            this.viewConfig.liveboardId ?? this.viewConfig.pinboardId;\n\n        if (!liveboardId) {\n            this.handleError(ERROR_MESSAGE.LIVEBOARD_VIZ_ID_VALIDATION);\n        }\n\n        if (this.viewConfig.fullHeight === true) {\n            this.on(\n                EmbedEvent.RouteChange,\n                this.setIframeHeightForNonEmbedLiveboard,\n            );\n            this.on(EmbedEvent.EmbedHeight, this.updateIFrameHeight);\n            this.on(EmbedEvent.EmbedIframeCenter, this.embedIframeCenter);\n        }\n\n        super.render();\n\n        const src = this.getIFrameSrc(liveboardId, vizId, runtimeFilters);\n        this.renderV1Embed(src);\n\n        return this;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PinboardEmbed extends LiveboardEmbed {}\n"]},"metadata":{},"sourceType":"module"}