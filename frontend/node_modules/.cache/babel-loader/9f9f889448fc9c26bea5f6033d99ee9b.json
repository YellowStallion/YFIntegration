{"ast":null,"code":"import { OperationType } from '../types';\nexport function getAnswerServiceInstance(session, query, operation, thoughtSpotHost) {\n  let variable;\n\n  const fetchQuery = async variables => {\n    try {\n      const response = await fetch(`${thoughtSpotHost}/prism/?op=${operation}`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json;charset=UTF-8',\n          'x-requested-by': 'ThoughtSpot',\n          accept: '*/*',\n          'accept-language': 'en-us'\n        },\n        body: JSON.stringify({\n          operationName: operation,\n          query,\n          variables\n        }),\n        credentials: 'include'\n      });\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const fetchData = (offset, batchSize) => {\n    if (operation === OperationType.GetChartWithData) {\n      variable = {\n        batchSize,\n        offset: offset * batchSize\n      };\n    } else {\n      variable = {\n        dataPaginationParams: {\n          isClientPaginated: true,\n          offset: offset * batchSize,\n          size: batchSize\n        }\n      };\n    }\n\n    return fetchQuery({\n      session,\n      ...variable\n    });\n  };\n\n  return {\n    fetchData\n  };\n}","map":{"version":3,"sources":["C:\\Users\\NathanSchroeder\\Documents\\Dev\\IntegrationEnvironment\\frontend\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils\\answerService.ts"],"names":[],"mappings":"AAAA,SAA2B,aAA3B,QAAgD,UAAhD;AAEA,OAAM,SAAU,wBAAV,CACF,OADE,EAEF,KAFE,EAGF,SAHE,EAIF,eAJE,EAIqB;AAEvB,MAAI,QAAJ;;AAEA,QAAM,UAAU,GAAG,MAAO,SAAP,IAAyB;AACxC,QAAI;AACA,YAAM,QAAQ,GAAG,MAAM,KAAK,CACxB,GAAG,eAAe,cAAc,SAAS,EADjB,EAExB;AACI,QAAA,MAAM,EAAE,MADZ;AAEI,QAAA,OAAO,EAAE;AACL,0BAAgB,gCADX;AAEL,4BAAkB,aAFb;AAGL,UAAA,MAAM,EAAE,KAHH;AAIL,6BAAmB;AAJd,SAFb;AAQI,QAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AACjB,UAAA,aAAa,EAAE,SADE;AAEjB,UAAA,KAFiB;AAGjB,UAAA;AAHiB,SAAf,CARV;AAaI,QAAA,WAAW,EAAE;AAbjB,OAFwB,CAA5B;AAkBA,YAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAT,EAArB;AACA,aAAO,MAAM,CAAC,IAAd;AACH,KArBD,CAqBE,OAAO,KAAP,EAAc;AACZ,aAAO,KAAP;AACH;AACJ,GAzBD;;AA2BA,QAAM,SAAS,GAAG,CAAC,MAAD,EAAiB,SAAjB,KAAsC;AACpD,QAAI,SAAS,KAAK,aAAa,CAAC,gBAAhC,EAAkD;AAC9C,MAAA,QAAQ,GAAG;AAAE,QAAA,SAAF;AAAa,QAAA,MAAM,EAAE,MAAM,GAAG;AAA9B,OAAX;AACH,KAFD,MAEO;AACH,MAAA,QAAQ,GAAG;AACP,QAAA,oBAAoB,EAAE;AAClB,UAAA,iBAAiB,EAAE,IADD;AAElB,UAAA,MAAM,EAAE,MAAM,GAAG,SAFC;AAGlB,UAAA,IAAI,EAAE;AAHY;AADf,OAAX;AAOH;;AACD,WAAO,UAAU,CAAC;AACd,MAAA,OADc;AAEd,SAAG;AAFW,KAAD,CAAjB;AAIH,GAhBD;;AAkBA,SAAO;AACH,IAAA;AADG,GAAP;AAGH","sourcesContent":["import { SessionInterface, OperationType } from '../types';\n\nexport function getAnswerServiceInstance(\n    session: SessionInterface,\n    query: string,\n    operation: string,\n    thoughtSpotHost: string,\n): any {\n    let variable: any;\n\n    const fetchQuery = async (variables: any) => {\n        try {\n            const response = await fetch(\n                `${thoughtSpotHost}/prism/?op=${operation}`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json;charset=UTF-8',\n                        'x-requested-by': 'ThoughtSpot',\n                        accept: '*/*',\n                        'accept-language': 'en-us',\n                    },\n                    body: JSON.stringify({\n                        operationName: operation,\n                        query,\n                        variables,\n                    }),\n                    credentials: 'include',\n                },\n            );\n            const result = await response.json();\n            return result.data;\n        } catch (error) {\n            return error;\n        }\n    };\n\n    const fetchData = (offset: number, batchSize: number) => {\n        if (operation === OperationType.GetChartWithData) {\n            variable = { batchSize, offset: offset * batchSize };\n        } else {\n            variable = {\n                dataPaginationParams: {\n                    isClientPaginated: true,\n                    offset: offset * batchSize,\n                    size: batchSize,\n                },\n            };\n        }\n        return fetchQuery({\n            session,\n            ...variable,\n        });\n    };\n\n    return {\n        fetchData,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}