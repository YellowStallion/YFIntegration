{"ast":null,"code":"import * as mixpanel from 'mixpanel-browser';\nexport const EndPoints = {\n  CONFIG: '/callosum/v1/system/config'\n};\nexport const MIXPANEL_EVENT = {\n  VISUAL_SDK_RENDER_START: 'visual-sdk-render-start',\n  VISUAL_SDK_CALLED_INIT: 'visual-sdk-called-init',\n  VISUAL_SDK_RENDER_COMPLETE: 'visual-sdk-render-complete',\n  VISUAL_SDK_RENDER_FAILED: 'visual-sdk-render-failed',\n  VISUAL_SDK_TRIGGER: 'visual-sdk-trigger',\n  VISUAL_SDK_IFRAME_LOAD_PERFORMANCE: 'visual-sdk-iframe-load-performance'\n};\nlet isEventCollectorOn = false;\nconst eventCollectorQueue = [];\n\nfunction setEventCollectorOn() {\n  isEventCollectorOn = true;\n}\n\nfunction getEventCollectorOnValue() {\n  return isEventCollectorOn;\n}\n/**\n * Pushes the event with its Property key-value map to mixpanel.\n * @param eventId\n * @param eventProps\n */\n\n\nexport async function uploadMixpanelEvent(eventId) {\n  let eventProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!getEventCollectorOnValue()) {\n    eventCollectorQueue.push({\n      eventId,\n      eventProps\n    });\n    return Promise.resolve();\n  }\n\n  return new Promise(() => mixpanel.track(eventId, eventProps));\n}\n\nfunction emptyQueue() {\n  eventCollectorQueue.forEach(event => {\n    uploadMixpanelEvent(event.eventId, event.eventProps);\n  });\n}\n\nexport function initMixpanel(sessionInfo) {\n  if (!sessionInfo || !sessionInfo.mixpanelToken) {\n    return;\n  } // On a public cluster the user is anonymous, so don't set the identify to userGUID\n\n\n  const isPublicCluster = !!sessionInfo.isPublicUser;\n  const token = sessionInfo.mixpanelToken;\n\n  if (token) {\n    mixpanel.init(token);\n\n    if (!isPublicCluster) {\n      mixpanel.identify(sessionInfo.userGUID);\n    }\n\n    setEventCollectorOn();\n    emptyQueue();\n  }\n}","map":{"version":3,"sources":["C:\\Users\\NathanSchroeder\\Documents\\Dev\\IntegrationEnvironment\\frontend\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\mixpanel-service.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,QAAZ,MAA0B,kBAA1B;AAEA,OAAO,MAAM,SAAS,GAAG;AACrB,EAAA,MAAM,EAAE;AADa,CAAlB;AAIP,OAAO,MAAM,cAAc,GAAG;AAC1B,EAAA,uBAAuB,EAAE,yBADC;AAE1B,EAAA,sBAAsB,EAAE,wBAFE;AAG1B,EAAA,0BAA0B,EAAE,4BAHF;AAI1B,EAAA,wBAAwB,EAAE,0BAJA;AAK1B,EAAA,kBAAkB,EAAE,oBALM;AAM1B,EAAA,kCAAkC,EAAE;AANV,CAAvB;AASP,IAAI,kBAAkB,GAAG,KAAzB;AACA,MAAM,mBAAmB,GAA2C,EAApE;;AAEA,SAAS,mBAAT,GAA4B;AACxB,EAAA,kBAAkB,GAAG,IAArB;AACH;;AAED,SAAS,wBAAT,GAAiC;AAC7B,SAAO,kBAAP;AACH;AAED;;;;AAIG;;;AACH,OAAO,eAAe,mBAAf,CACH,OADG,EAEY;AAAA,MAAf,UAAe,uEAAF,EAAE;;AAEf,MAAI,CAAC,wBAAwB,EAA7B,EAAiC;AAC7B,IAAA,mBAAmB,CAAC,IAApB,CAAyB;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,KAAzB;AACA,WAAO,OAAO,CAAC,OAAR,EAAP;AACH;;AACD,SAAO,IAAI,OAAJ,CAAY,MAAM,QAAQ,CAAC,KAAT,CAAe,OAAf,EAAwB,UAAxB,CAAlB,CAAP;AACH;;AAED,SAAS,UAAT,GAAmB;AACf,EAAA,mBAAmB,CAAC,OAApB,CAA6B,KAAD,IAAU;AAClC,IAAA,mBAAmB,CAAC,KAAK,CAAC,OAAP,EAAgB,KAAK,CAAC,UAAtB,CAAnB;AACH,GAFD;AAGH;;AAED,OAAM,SAAU,YAAV,CAAuB,WAAvB,EAAuC;AACzC,MAAI,CAAC,WAAD,IAAgB,CAAC,WAAW,CAAC,aAAjC,EAAgD;AAC5C;AACH,GAHwC,CAIzC;;;AACA,QAAM,eAAe,GAAG,CAAC,CAAC,WAAW,CAAC,YAAtC;AACA,QAAM,KAAK,GAAG,WAAW,CAAC,aAA1B;;AACA,MAAI,KAAJ,EAAW;AACP,IAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;;AACA,QAAI,CAAC,eAAL,EAAsB;AAClB,MAAA,QAAQ,CAAC,QAAT,CAAkB,WAAW,CAAC,QAA9B;AACH;;AACD,IAAA,mBAAmB;AACnB,IAAA,UAAU;AACb;AACJ","sourcesContent":["import * as mixpanel from 'mixpanel-browser';\n\nexport const EndPoints = {\n    CONFIG: '/callosum/v1/system/config',\n};\n\nexport const MIXPANEL_EVENT = {\n    VISUAL_SDK_RENDER_START: 'visual-sdk-render-start',\n    VISUAL_SDK_CALLED_INIT: 'visual-sdk-called-init',\n    VISUAL_SDK_RENDER_COMPLETE: 'visual-sdk-render-complete',\n    VISUAL_SDK_RENDER_FAILED: 'visual-sdk-render-failed',\n    VISUAL_SDK_TRIGGER: 'visual-sdk-trigger',\n    VISUAL_SDK_IFRAME_LOAD_PERFORMANCE: 'visual-sdk-iframe-load-performance',\n};\n\nlet isEventCollectorOn = false;\nconst eventCollectorQueue: { eventId: string; eventProps: any }[] = [];\n\nfunction setEventCollectorOn() {\n    isEventCollectorOn = true;\n}\n\nfunction getEventCollectorOnValue() {\n    return isEventCollectorOn;\n}\n\n/**\n * Pushes the event with its Property key-value map to mixpanel.\n * @param eventId\n * @param eventProps\n */\nexport async function uploadMixpanelEvent(\n    eventId: string,\n    eventProps = {},\n): Promise<any> {\n    if (!getEventCollectorOnValue()) {\n        eventCollectorQueue.push({ eventId, eventProps });\n        return Promise.resolve();\n    }\n    return new Promise(() => mixpanel.track(eventId, eventProps));\n}\n\nfunction emptyQueue() {\n    eventCollectorQueue.forEach((event) => {\n        uploadMixpanelEvent(event.eventId, event.eventProps);\n    });\n}\n\nexport function initMixpanel(sessionInfo: any): void {\n    if (!sessionInfo || !sessionInfo.mixpanelToken) {\n        return;\n    }\n    // On a public cluster the user is anonymous, so don't set the identify to userGUID\n    const isPublicCluster = !!sessionInfo.isPublicUser;\n    const token = sessionInfo.mixpanelToken;\n    if (token) {\n        mixpanel.init(token);\n        if (!isPublicCluster) {\n            mixpanel.identify(sessionInfo.userGUID);\n        }\n        setEventCollectorOn();\n        emptyQueue();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}