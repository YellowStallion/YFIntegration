{"ast":null,"code":"/* eslint-disable import/no-mutable-exports */\n\n/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getThoughtSpotHost } from '../config';\nimport { authenticate } from '../auth';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\nlet config = {};\nexport let authPromise;\n/**\n * Perform authentication on the ThoughtSpot app as applicable.\n */\n\nexport const handleAuth = () => {\n  const authConfig = { ...config,\n    thoughtSpotHost: getThoughtSpotHost(config)\n  };\n  authPromise = authenticate(authConfig);\n};\nexport const getEmbedConfig = () => config;\nexport const getAuthPromise = () => authPromise;\n/**\n * Prefetches static resources from the specified URL. Web browsers can then cache the prefetched resources and serve them from the user's local disk to provide faster access to your app.\n * @param url The URL provided for prefetch\n */\n\nexport const prefetch = url => {\n  if (url === '') {\n    // eslint-disable-next-line no-console\n    console.warn('The prefetch method does not have a valid URL');\n  } else {\n    const iFrame = document.createElement('iframe');\n    iFrame.src = url || config.thoughtSpotHost;\n    iFrame.style.width = '0';\n    iFrame.style.height = '0';\n    iFrame.style.border = '0';\n    iFrame.classList.add('prefetchIframe');\n    document.body.appendChild(iFrame);\n  }\n};\n/**\n * Initialize the ThoughtSpot embed settings globally and perform\n * authentication if applicable.\n * @param embedConfig The configuration object containing ThoughtSpot host,\n * authentication mechanism and so on.\n */\n\nexport const init = embedConfig => {\n  config = embedConfig;\n  handleAuth();\n  uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_CALLED_INIT, {\n    authType: config.authType,\n    host: config.thoughtSpotHost\n  });\n\n  if (config.callPrefetch) {\n    prefetch(config.thoughtSpotHost);\n  }\n};\nlet renderQueue = Promise.resolve();\n/**\n * Renders functions in a queue, resolves to next function only after the callback next is called\n * @param fn The function being registered\n */\n\nexport const renderInQueue = fn => {\n  const {\n    queueMultiRenders = false\n  } = config;\n\n  if (queueMultiRenders) {\n    renderQueue = renderQueue.then(() => new Promise(res => fn(res)));\n  } else {\n    // Sending an empty function to keep it consistent with the above usage.\n    fn(() => {}); // eslint-disable-line @typescript-eslint/no-empty-function\n  }\n};","map":{"version":3,"sources":["C:\\Users\\NathanSchroeder\\Documents\\Dev\\IntegrationEnvironment\\frontend\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\embed\\base.ts"],"names":[],"mappings":"AAAA;;AACA;;;;;;;AAOG;AACH,SAAS,kBAAT,QAAmC,WAAnC;AAEA,SAAS,YAAT,QAA6B,SAA7B;AACA,SAAS,mBAAT,EAA8B,cAA9B,QAAoD,qBAApD;AAEA,IAAI,MAAM,GAAG,EAAb;AAEA,OAAO,IAAI,WAAJ;AAEP;;AAEG;;AACH,OAAO,MAAM,UAAU,GAAG,MAAW;AACjC,QAAM,UAAU,GAAG,EACf,GAAG,MADY;AAEf,IAAA,eAAe,EAAE,kBAAkB,CAAC,MAAD;AAFpB,GAAnB;AAIA,EAAA,WAAW,GAAG,YAAY,CAAC,UAAD,CAA1B;AACH,CANM;AAQP,OAAO,MAAM,cAAc,GAAG,MAAmB,MAA1C;AAEP,OAAO,MAAM,cAAc,GAAG,MAAqB,WAA5C;AAEP;;;AAGG;;AACH,OAAO,MAAM,QAAQ,GAAI,GAAD,IAAuB;AAC3C,MAAI,GAAG,KAAK,EAAZ,EAAgB;AACZ;AACA,IAAA,OAAO,CAAC,IAAR,CAAa,+CAAb;AACH,GAHD,MAGO;AACH,UAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AACA,IAAA,MAAM,CAAC,GAAP,GAAa,GAAG,IAAI,MAAM,CAAC,eAA3B;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,KAAb,GAAqB,GAArB;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB,GAAtB;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB,GAAtB;AACA,IAAA,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,gBAArB;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,MAA1B;AACH;AACJ,CAbM;AAeP;;;;;AAKG;;AACH,OAAO,MAAM,IAAI,GAAI,WAAD,IAAmC;AACnD,EAAA,MAAM,GAAG,WAAT;AACA,EAAA,UAAU;AAEV,EAAA,mBAAmB,CAAC,cAAc,CAAC,sBAAhB,EAAwC;AACvD,IAAA,QAAQ,EAAE,MAAM,CAAC,QADsC;AAEvD,IAAA,IAAI,EAAE,MAAM,CAAC;AAF0C,GAAxC,CAAnB;;AAKA,MAAI,MAAM,CAAC,YAAX,EAAyB;AACrB,IAAA,QAAQ,CAAC,MAAM,CAAC,eAAR,CAAR;AACH;AACJ,CAZM;AAcP,IAAI,WAAW,GAAiB,OAAO,CAAC,OAAR,EAAhC;AAEA;;;AAGG;;AACH,OAAO,MAAM,aAAa,GAAI,EAAD,IAA6C;AACtE,QAAM;AAAE,IAAA,iBAAiB,GAAG;AAAtB,MAAgC,MAAtC;;AACA,MAAI,iBAAJ,EAAuB;AACnB,IAAA,WAAW,GAAG,WAAW,CAAC,IAAZ,CAAiB,MAAM,IAAI,OAAJ,CAAa,GAAD,IAAS,EAAE,CAAC,GAAD,CAAvB,CAAvB,CAAd;AACH,GAFD,MAEO;AACH;AACA,IAAA,EAAE,CAAC,MAAK,CAAG,CAAT,CAAF,CAFG,CAEW;AACjB;AACJ,CARM","sourcesContent":["/* eslint-disable import/no-mutable-exports */\n/**\n * Copyright (c) 2022\n *\n * Base classes\n *\n * @summary Base classes\n * @author Ayon Ghosh <ayon.ghosh@thoughtspot.com>\n */\nimport { getThoughtSpotHost } from '../config';\nimport { EmbedConfig } from '../types';\nimport { authenticate } from '../auth';\nimport { uploadMixpanelEvent, MIXPANEL_EVENT } from '../mixpanel-service';\n\nlet config = {} as EmbedConfig;\n\nexport let authPromise: Promise<void>;\n\n/**\n * Perform authentication on the ThoughtSpot app as applicable.\n */\nexport const handleAuth = (): void => {\n    const authConfig = {\n        ...config,\n        thoughtSpotHost: getThoughtSpotHost(config),\n    };\n    authPromise = authenticate(authConfig);\n};\n\nexport const getEmbedConfig = (): EmbedConfig => config;\n\nexport const getAuthPromise = (): Promise<void> => authPromise;\n\n/**\n * Prefetches static resources from the specified URL. Web browsers can then cache the prefetched resources and serve them from the user's local disk to provide faster access to your app.\n * @param url The URL provided for prefetch\n */\nexport const prefetch = (url?: string): void => {\n    if (url === '') {\n        // eslint-disable-next-line no-console\n        console.warn('The prefetch method does not have a valid URL');\n    } else {\n        const iFrame = document.createElement('iframe');\n        iFrame.src = url || config.thoughtSpotHost;\n        iFrame.style.width = '0';\n        iFrame.style.height = '0';\n        iFrame.style.border = '0';\n        iFrame.classList.add('prefetchIframe');\n        document.body.appendChild(iFrame);\n    }\n};\n\n/**\n * Initialize the ThoughtSpot embed settings globally and perform\n * authentication if applicable.\n * @param embedConfig The configuration object containing ThoughtSpot host,\n * authentication mechanism and so on.\n */\nexport const init = (embedConfig: EmbedConfig): void => {\n    config = embedConfig;\n    handleAuth();\n\n    uploadMixpanelEvent(MIXPANEL_EVENT.VISUAL_SDK_CALLED_INIT, {\n        authType: config.authType,\n        host: config.thoughtSpotHost,\n    });\n\n    if (config.callPrefetch) {\n        prefetch(config.thoughtSpotHost);\n    }\n};\n\nlet renderQueue: Promise<any> = Promise.resolve();\n\n/**\n * Renders functions in a queue, resolves to next function only after the callback next is called\n * @param fn The function being registered\n */\nexport const renderInQueue = (fn: (next?: (val?: any) => void) => void) => {\n    const { queueMultiRenders = false } = config;\n    if (queueMultiRenders) {\n        renderQueue = renderQueue.then(() => new Promise((res) => fn(res)));\n    } else {\n        // Sending an empty function to keep it consistent with the above usage.\n        fn(() => {}); // eslint-disable-line @typescript-eslint/no-empty-function\n    }\n};\n"]},"metadata":{},"sourceType":"module"}