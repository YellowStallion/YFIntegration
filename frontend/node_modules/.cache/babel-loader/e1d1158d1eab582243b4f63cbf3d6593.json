{"ast":null,"code":"import { getEmbedConfig, handleAuth } from '../embed/base';\nimport { initSession } from '../auth';\nimport { EmbedEvent, OperationType } from '../types';\nimport { getAnswerServiceInstance } from './answerService';\nexport function processCustomAction(e, thoughtSpotHost) {\n  var _a;\n\n  if ([OperationType.GetChartWithData, OperationType.GetTableWithHeadlineData].includes((_a = e.data) === null || _a === void 0 ? void 0 : _a.operation)) {\n    const {\n      session,\n      query,\n      operation\n    } = e.data;\n    const answerService = getAnswerServiceInstance(session, query, operation, thoughtSpotHost);\n    return { ...e,\n      answerService\n    };\n  }\n\n  return e;\n}\n\nfunction processAuthInit(e) {\n  var _a, _b; // Store user session details sent by app.\n\n\n  initSession(e.data); // Expose only allowed details (eg: userGUID) back to SDK users.\n\n  return { ...e,\n    data: {\n      userGUID: ((_a = e.data) === null || _a === void 0 ? void 0 : _a.userGUID) || ((_b = e.payload) === null || _b === void 0 ? void 0 : _b.userGUID)\n    }\n  };\n}\n\nfunction processAuthExpire(e) {\n  const {\n    autoLogin = true\n  } = getEmbedConfig(); // Set default to true\n\n  if (autoLogin) {\n    handleAuth();\n  }\n\n  return e;\n}\n\nexport function getProcessData(type, e, thoughtSpotHost) {\n  switch (type) {\n    case EmbedEvent.CustomAction:\n      return processCustomAction(e, thoughtSpotHost);\n\n    case EmbedEvent.AuthInit:\n      return processAuthInit(e);\n\n    case EmbedEvent.AuthExpire:\n      return processAuthExpire(e);\n\n    default:\n  }\n\n  return e;\n}","map":{"version":3,"sources":["C:\\Users\\NathanSchroeder\\Documents\\Dev\\IntegrationEnvironment\\frontend\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\utils\\processData.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,EAAyB,UAAzB,QAA2C,eAA3C;AACA,SAAS,WAAT,QAA4B,SAA5B;AACA,SAAS,UAAT,EAAqB,aAArB,QAA0C,UAA1C;AACA,SAAS,wBAAT,QAAyC,iBAAzC;AAEA,OAAM,SAAU,mBAAV,CAA8B,CAA9B,EAAsC,eAAtC,EAA6D;;;AAC/D,MACI,CACI,aAAa,CAAC,gBADlB,EAEI,aAAa,CAAC,wBAFlB,EAGE,QAHF,CAGW,CAAA,EAAA,GAAA,CAAC,CAAC,IAAF,MAAM,IAAN,IAAM,EAAA,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAM,EAAA,CAAE,SAHnB,CADJ,EAKE;AACE,UAAM;AAAE,MAAA,OAAF;AAAW,MAAA,KAAX;AAAkB,MAAA;AAAlB,QAAgC,CAAC,CAAC,IAAxC;AACA,UAAM,aAAa,GAAG,wBAAwB,CAC1C,OAD0C,EAE1C,KAF0C,EAG1C,SAH0C,EAI1C,eAJ0C,CAA9C;AAMA,WAAO,EACH,GAAG,CADA;AAEH,MAAA;AAFG,KAAP;AAIH;;AACD,SAAO,CAAP;AACH;;AAED,SAAS,eAAT,CAAyB,CAAzB,EAA+B;aAAA,CAC3B;;;AACA,EAAA,WAAW,CAAC,CAAC,CAAC,IAAH,CAAX,CAF2B,CAI3B;;AACA,SAAO,EACH,GAAG,CADA;AAEH,IAAA,IAAI,EAAE;AACF,MAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,GAAA,CAAC,CAAC,IAAF,MAAM,IAAN,IAAM,EAAA,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAM,EAAA,CAAE,QAAR,MAAoB,CAAA,EAAA,GAAA,CAAC,CAAC,OAAF,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,QAA/B;AADR;AAFH,GAAP;AAMH;;AAED,SAAS,iBAAT,CAA2B,CAA3B,EAAiC;AAC7B,QAAM;AAAE,IAAA,SAAS,GAAG;AAAd,MAAuB,cAAc,EAA3C,CAD6B,CACkB;;AAC/C,MAAI,SAAJ,EAAe;AACX,IAAA,UAAU;AACb;;AACD,SAAO,CAAP;AACH;;AAED,OAAM,SAAU,cAAV,CACF,IADE,EAEF,CAFE,EAGF,eAHE,EAGqB;AAEvB,UAAQ,IAAR;AACI,SAAK,UAAU,CAAC,YAAhB;AACI,aAAO,mBAAmB,CAAC,CAAD,EAAI,eAAJ,CAA1B;;AACJ,SAAK,UAAU,CAAC,QAAhB;AACI,aAAO,eAAe,CAAC,CAAD,CAAtB;;AACJ,SAAK,UAAU,CAAC,UAAhB;AACI,aAAO,iBAAiB,CAAC,CAAD,CAAxB;;AACJ;AAPJ;;AASA,SAAO,CAAP;AACH","sourcesContent":["import { getEmbedConfig, handleAuth } from '../embed/base';\nimport { initSession } from '../auth';\nimport { EmbedEvent, OperationType } from '../types';\nimport { getAnswerServiceInstance } from './answerService';\n\nexport function processCustomAction(e: any, thoughtSpotHost: string) {\n    if (\n        [\n            OperationType.GetChartWithData,\n            OperationType.GetTableWithHeadlineData,\n        ].includes(e.data?.operation)\n    ) {\n        const { session, query, operation } = e.data;\n        const answerService = getAnswerServiceInstance(\n            session,\n            query,\n            operation,\n            thoughtSpotHost,\n        );\n        return {\n            ...e,\n            answerService,\n        };\n    }\n    return e;\n}\n\nfunction processAuthInit(e: any) {\n    // Store user session details sent by app.\n    initSession(e.data);\n\n    // Expose only allowed details (eg: userGUID) back to SDK users.\n    return {\n        ...e,\n        data: {\n            userGUID: e.data?.userGUID || e.payload?.userGUID,\n        },\n    };\n}\n\nfunction processAuthExpire(e: any) {\n    const { autoLogin = true } = getEmbedConfig(); // Set default to true\n    if (autoLogin) {\n        handleAuth();\n    }\n    return e;\n}\n\nexport function getProcessData(\n    type: EmbedEvent,\n    e: any,\n    thoughtSpotHost: string,\n) {\n    switch (type) {\n        case EmbedEvent.CustomAction:\n            return processCustomAction(e, thoughtSpotHost);\n        case EmbedEvent.AuthInit:\n            return processAuthInit(e);\n        case EmbedEvent.AuthExpire:\n            return processAuthExpire(e);\n        default:\n    }\n    return e;\n}\n"]},"metadata":{},"sourceType":"module"}