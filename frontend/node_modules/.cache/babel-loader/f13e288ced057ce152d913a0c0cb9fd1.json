{"ast":null,"code":"import React from 'react';\nimport { SearchEmbed as _SearchEmbed } from '../embed/search';\nimport { AppEmbed as _AppEmbed } from '../embed/app';\nimport { LiveboardEmbed as _LiveboardEmbed } from '../embed/liveboard';\nimport { getViewPropsAndListeners } from './util';\n\nconst componentFactory = EmbedConstructor => props => {\n  const ref = React.useRef(null);\n  const {\n    className,\n    ...embedProps\n  } = props;\n  const {\n    viewConfig,\n    listeners\n  } = getViewPropsAndListeners(embedProps);\n  React.useEffect(() => {\n    const tsEmbed = new EmbedConstructor(ref.current, { ...viewConfig\n    });\n    Object.keys(listeners).forEach(eventName => {\n      tsEmbed.on(eventName, listeners[eventName]);\n    });\n    tsEmbed.render();\n  }, [embedProps]);\n  return React.createElement(\"div\", {\n    \"data-testid\": \"tsEmbed\",\n    className: className,\n    ref: ref\n  });\n};\n\nexport const SearchEmbed = componentFactory(_SearchEmbed);\nexport const AppEmbed = componentFactory(_AppEmbed);\nexport const LiveboardEmbed = componentFactory(_LiveboardEmbed);\nexport const PinboardEmbed = componentFactory(_LiveboardEmbed);","map":{"version":3,"sources":["C:\\Users\\NathanSchroeder\\Documents\\Dev\\IntegrationEnvironment\\frontend\\node_modules\\@thoughtspot\\visual-embed-sdk\\src\\react\\index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,WAAW,IAAI,YAAxB,QAA8D,iBAA9D;AACA,SAAS,QAAQ,IAAI,SAArB,QAAqD,cAArD;AACA,SACI,cAAc,IAAI,eADtB,QAGO,oBAHP;AAOA,SAAqB,wBAArB,QAAqD,QAArD;;AAEA,MAAM,gBAAgB,GAKlB,gBALqB,IAMnB,KAAD,IAAa;AACd,QAAM,GAAG,GAAG,KAAK,CAAC,MAAN,CAA6B,IAA7B,CAAZ;AACA,QAAM;AAAE,IAAA,SAAF;AAAa,OAAG;AAAhB,MAA+B,KAArC;AACA,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA;AAAd,MAA4B,wBAAwB,CAGxD,UAHwD,CAA1D;AAIA,EAAA,KAAK,CAAC,SAAN,CAAgB,MAAK;AACjB,UAAM,OAAO,GAAG,IAAI,gBAAJ,CAAqB,GAAI,CAAC,OAA1B,EAAmC,EAC/C,GAAG;AAD4C,KAAnC,CAAhB;AAGA,IAAA,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,OAAvB,CAAgC,SAAD,IAAc;AACzC,MAAA,OAAO,CAAC,EAAR,CACI,SADJ,EAEI,SAAS,CAAC,SAAD,CAFb;AAIH,KALD;AAMA,IAAA,OAAO,CAAC,MAAR;AACH,GAXD,EAWG,CAAC,UAAD,CAXH;AAaA,SAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAA,mBAAiB,SAAjB;AAA2B,IAAA,SAAS,EAAE,SAAtC;AAAiD,IAAA,GAAG,EAAE;AAAtD,GAAA,CAAP;AACH,CA3BD;;AA+BA,OAAO,MAAM,WAAW,GAAG,gBAAgB,CAIzC,YAJyC,CAApC;AAQP,OAAO,MAAM,QAAQ,GAAG,gBAAgB,CAItC,SAJsC,CAAjC;AAQP,OAAO,MAAM,cAAc,GAAG,gBAAgB,CAI5C,eAJ4C,CAAvC;AAMP,OAAO,MAAM,aAAa,GAAG,gBAAgB,CAI3C,eAJ2C,CAAtC","sourcesContent":["import React from 'react';\nimport { SearchEmbed as _SearchEmbed, SearchViewConfig } from '../embed/search';\nimport { AppEmbed as _AppEmbed, AppViewConfig } from '../embed/app';\nimport {\n    LiveboardEmbed as _LiveboardEmbed,\n    LiveboardViewConfig,\n} from '../embed/liveboard';\nimport { TsEmbed, ViewConfig } from '../embed/ts-embed';\n\nimport { EmbedEvent, MessageCallback } from '../types';\nimport { EmbedProps, getViewPropsAndListeners } from './util';\n\nconst componentFactory = <\n    T extends typeof TsEmbed,\n    U extends EmbedProps,\n    V extends ViewConfig\n>(\n    EmbedConstructor: T,\n) => (props: U) => {\n    const ref = React.useRef<HTMLDivElement>(null);\n    const { className, ...embedProps } = props;\n    const { viewConfig, listeners } = getViewPropsAndListeners<\n        Omit<U, 'className'>,\n        V\n    >(embedProps);\n    React.useEffect(() => {\n        const tsEmbed = new EmbedConstructor(ref!.current, {\n            ...viewConfig,\n        });\n        Object.keys(listeners).forEach((eventName) => {\n            tsEmbed.on(\n                eventName as EmbedEvent,\n                listeners[eventName as EmbedEvent],\n            );\n        });\n        tsEmbed.render();\n    }, [embedProps]);\n\n    return <div data-testid=\"tsEmbed\" className={className} ref={ref}></div>;\n};\n\ninterface SearchProps extends EmbedProps, SearchViewConfig {}\n\nexport const SearchEmbed = componentFactory<\n    typeof _SearchEmbed,\n    SearchProps,\n    SearchViewConfig\n>(_SearchEmbed);\n\ninterface AppProps extends EmbedProps, AppViewConfig {}\n\nexport const AppEmbed = componentFactory<\n    typeof _AppEmbed,\n    AppProps,\n    AppViewConfig\n>(_AppEmbed);\n\ninterface LiveboardProps extends EmbedProps, LiveboardViewConfig {}\n\nexport const LiveboardEmbed = componentFactory<\n    typeof _LiveboardEmbed,\n    LiveboardProps,\n    LiveboardViewConfig\n>(_LiveboardEmbed);\n\nexport const PinboardEmbed = componentFactory<\n    typeof _LiveboardEmbed,\n    LiveboardProps,\n    LiveboardViewConfig\n>(_LiveboardEmbed);\n"]},"metadata":{},"sourceType":"module"}